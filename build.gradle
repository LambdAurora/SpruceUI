plugins {
	id 'fabric-loom' version '1.+'
	id 'io.github.juuxel.loom-quiltflower' version '1.8.+'
	id 'org.quiltmc.gradle.licenser' version '1.1.+'
	id 'java-library'
	id 'maven-publish'
}

group = project.maven_group
version = "${project.mod_version}+${getMCVersionString()}"
archivesBaseName = project.archives_base_name

// This field defines the Java version your mod target.
def targetJavaVersion = 17

Set<String> modules = [
		'fabric-api-base',
		'fabric-lifecycle-events-v1',
		'fabric-rendering-v1',
		'fabric-resource-loader-v0',
		'fabric-screen-api-v1',
		'fabric-key-binding-api-v1'
]

String getMCVersionString() {
	return project.minecraft_version
}

sourceSets {
	testmod {
		compileClasspath += sourceSets.main.compileClasspath
		runtimeClasspath += sourceSets.main.runtimeClasspath
	}
}

repositories {
	mavenLocal()
	maven {
		name 'Quilt'
		url 'https://maven.quiltmc.org/repository/release'
	}
	maven {
		name 'TerraformersMC'
		url 'https://maven.terraformersmc.com/releases'
	}
	maven {
		name = "QuiltMC"
		url = "https://maven.quiltmc.org/repository/release"
	}
}

configurations {
	api.extendsFrom libApi
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_mappings}:intermediary-v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modules.stream().map { fabricApi.module(it, project.fabric_api_version) }.forEach {
		modImplementation it
	}

	modLocalRuntime("com.terraformersmc:modmenu:${project.modmenu_version}") {
		transitive = false
	}
	modLocalRuntime fabricApi.module("fabric-key-binding-api-v1", project.fabric_api_version)

	libApi 'org.jetbrains:annotations:23.0.0'

	testmodImplementation sourceSets.main.output
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.deprecation(true)
	it.options.incremental(true)
	it.options.release.set(targetJavaVersion)
}

processResources {
	inputs.property 'version', project.version

	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

loom {
	runs {
		testmodClient {
			client()
			source(sourceSets.testmod)
		}
	}
}

license {
	rule file('HEADER')
	include '**/*.java'
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			pom {
				name = 'SpruceUI'
				description = 'A Minecraft mod API which adds some GUI utilities.'
			}
		}
	}

	repositories {
		mavenLocal()
		maven {
			name 'BuildDirLocal'
			url "$buildDir/repo"
		}
		maven {
			name 'GithubPackages'
			url 'https://maven.pkg.github.com/LambdAurora/SpruceUI'
			credentials {
				username = project.findProperty('gpr.user') ?: System.getenv('USERNAME')
				password = project.findProperty('gpr.key') ?: System.getenv('TOKEN')
			}
		}

		def spruceuiMaven = System.getenv('SPRUCEUI_MAVEN')
		if (spruceuiMaven) {
			maven {
				name = 'SpruceUIMaven'
				url = uri(spruceuiMaven)
				credentials {
					username = project.findProperty('gpr.user') ?: System.getenv('MAVEN_USERNAME')
					password = project.findProperty('gpr.key') ?: System.getenv('MAVEN_PASSWORD')
				}
			}
		}
	}
}
